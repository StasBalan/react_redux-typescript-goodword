{"version":3,"sources":["components/Header.tsx","components/Home.tsx","constants/constants.ts","actions/vocabulary/types.ts","components/Settings.tsx","actions/vocabulary/actions.ts","actions/localStorage/types.ts","components/CardInfo.tsx","components/CardsItems.tsx","actions/localStorage/actions.ts","actions/loader/types.ts","actions/loader/actions.ts","actions/effects/types.ts","components/Cards.tsx","actions/effects/fetchNewWords.ts","actions/effects/actions.ts","components/Favorites.tsx","containers/App/App.tsx","serviceWorker.ts","reducers/vocabularyReducer.ts","reducers/favoritesReducer.ts","reducers/loaderReducer.ts","reducers/saveCardDataReducer.ts","localStorage.ts","store/store.ts","index.tsx"],"names":["Header","state","menu","title","route","elementsHeader","this","map","el","index","react_default","a","createElement","key","className","react_router_dom","to","Component","Home","components_Header","src","alt","INITIAL_RANGE","KEY","FILTER_VOCABULARY","ADD_WORD_TO_VOCABULARY","Settings","range","handleChange","e","Number","target","value","console","log","_this","setState","onSave","vocabulary","props","newVocabulary","wordsToLearn","i","rand","Math","floor","random","length","push","concat","splice","addWordToVocabulary","filterVocabulary","onChange","type","min","max","step","onClick","connect","payload","wordToLearn","SAVE_IN_FAVORITES","CardInfo","cardInfoSrcforImg","_this2","cardTitle","fetch","then","res","json","data","results","urls","small","_this$props","cardDescription","CardsItems","isShowingCardInfo","cardInfoTitle","cardInfoDescription","handleOpenCardInfo","description","onAddFavorites","favorites","saveInFavorites","card","_this$state","elementsCard","Fragment","components_CardInfo","SHOWING_CARDS","isLoading","SAVE_CARD_DATA","Cards","wordsFromServer","onShow","storedWords","Object","keys","newWords","filter","word","includes","fetchNewWords","loader","cardData","components_CardsItems","array","dispatch","serverResponse","meta","stems","shortdef","formatCardData","Promise","all","catch","error","Favorites","renderFavorites","elementsFavorites","React","favoritesCards","App","react_router","exact","path","component","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","arguments","undefined","action","objectSpread","toConsumableArray","actions","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","es","containers_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a62b984.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './style.css';\r\n\r\ninterface HeaderState {\r\n    title: string;\r\n    route: string;\r\n}\r\n\r\ninterface MenuInterface {\r\n    menu: HeaderState[]\r\n}\r\n\r\nclass Header extends Component<{}, MenuInterface> {\r\n\r\n    state: MenuInterface = {\r\n        menu: [\r\n            {title: 'Home', route: '/'},\r\n            {title: 'Settings', route: '/settings'},\r\n            {title: 'Cards', route: '/cards'},\r\n            {title: 'Favorites', route: '/favorites'}            \r\n        ]\r\n    }\r\n\r\n    render() {\r\n        const { menu } = this.state;\r\n\r\n        const elementsHeader = menu.map((el, index) => {\r\n            return(\r\n                <li key={index} className='header__item header-item'>\r\n                    <Link className='header-item__link' to={el.route}>{el.title}</Link>    \r\n                </li>\r\n            );\r\n        });\r\n\r\n        return(\r\n            <div className='header'>\r\n                <div className='container header__container'>\r\n                    <h3 className='header__title'>GOODWORD</h3>\r\n                    <ul className='header__menu'>\r\n                        {elementsHeader}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nimport Header from './Header';\r\n\r\nconst Home: React.FC = () => {\r\n    return(\r\n        <div className='home'>\r\n            <Header/>\r\n            <div className='container'>\r\n                <h1 className='title'>Welocme to our<br/>application for learning<br/>English word</h1>\r\n                <img className='home__img' src=\"https://www.onlygfx.com/wp-content/uploads/2016/08/flag-of-uk.png\" alt=\"flag\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","export const INITIAL_RANGE = 1;\r\nexport const KEY = 'b94e78e4-8545-4c28-bd32-2b331aede418';\r\nexport const KEY_FOR_PHOTO_API = '3600e79e752283c702d8928b0abbac28e7b0bd1b3108dfdb1d4c091a2b46a01d';","export const FILTER_VOCABULARY = 'FILTER_VOCABULARY';\r\nexport const ADD_WORD_TO_VOCABULARY = 'ADD_WORD_TO_VOCABULARY';\r\n\r\n// voc = ['bad', 'sds']\r\n// word = []\r\n\r\n// export interface Vocabulary {\r\n//     [index: number]: string;\r\n//     length: number; //?\r\n// }\r\n\r\n// export interface VocabularyArray {\r\n    \r\n// }\r\n\r\n// export interface WordToLearnArray {\r\n    \r\n// }\r\n\r\nexport interface VocabularyState {\r\n    vocabulary: string[];\r\n    wordToLearn: string[];\r\n}\r\n\r\ninterface FilterVocabularyAction {\r\n    type: typeof FILTER_VOCABULARY;\r\n    payload: string[];\r\n};\r\n\r\ninterface AddWordToVocabuldaryAction {\r\n    type: typeof ADD_WORD_TO_VOCABULARY;\r\n    payload: string[];\r\n}\r\n\r\nexport type VocabularyActionTypes = FilterVocabularyAction | AddWordToVocabuldaryAction;","import React, { Component } from 'react';\r\n\r\nimport './style.css';\r\n\r\nimport { INITIAL_RANGE } from '../constants/constants';\r\nimport { AppState } from '../store/store';\r\nimport Header from './Header';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { filterVocabulary, addWordToVocabulary } from '../actions/vocabulary/actions';\r\n\r\n\r\ninterface SettingsState {\r\n    range: number;\r\n};\r\n\r\ninterface AppProps {\r\n    vocabulary: string[];\r\n    wordToLearn?: string[];\r\n    addWordToVocabulary: (wordToLearn: string[]) => void;\r\n    filterVocabulary: (vocabulary: string[]) => void;\r\n}\r\n\r\nclass Settings extends Component<AppProps, SettingsState> {\r\n\r\n    state: SettingsState = {\r\n        range: INITIAL_RANGE\r\n    };\r\n\r\n    private handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const range = Number(e.target.value);\r\n        console.log('save range', range, typeof range);\r\n        this.setState({\r\n            range: range\r\n        });\r\n    }\r\n\r\n    private onSave = () => {\r\n        const { vocabulary } = this.props\r\n\r\n        console.log('you save settings', this.state.range);\r\n        console.log(vocabulary);\r\n\r\n        const newVocabulary = vocabulary;\r\n        const wordsToLearn = [];\r\n\r\n        for (let i = 0; i < this.state.range; i++) {\r\n            const rand = Math.floor(Math.random() * newVocabulary.length);\r\n            console.log('рандомная цифра: ', rand);\r\n            wordsToLearn.push(newVocabulary[rand]);\r\n            console.log(`рандомное слово: ${newVocabulary[rand]} и тип равен: ${typeof newVocabulary[rand]}`);\r\n            newVocabulary.splice(rand, 1);\r\n            console.log(`обновленный основной массив равен: ${newVocabulary}`);\r\n        }\r\n\r\n        console.log(wordsToLearn, newVocabulary);\r\n\r\n        if(wordsToLearn) {\r\n            this.props.addWordToVocabulary(wordsToLearn);\r\n            this.props.filterVocabulary(newVocabulary);\r\n        }\r\n\r\n        this.setState({\r\n            range: INITIAL_RANGE\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { range } = this.state;\r\n\r\n        return (\r\n            <div className='settings'>\r\n                <Header/>\r\n                <div className='container'>\r\n                    <div className='page__header'>\r\n                        <i className=\"material-icons\">settings_applications</i>\r\n                        <h2 className='subtitle'>Settings</h2>\r\n                    </div>\r\n                    <div className='settings__inner'>\r\n                        <p className='settings__value'>{range}</p>\r\n                        <input onChange={this.handleChange}\r\n                            value={range} \r\n                            type=\"range\" \r\n                            min='1' \r\n                            max='12' \r\n                            step='1'/>\r\n                        <button className='settings__button' onClick={this.onSave}>SAVE</button>\r\n                    </div>    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    vocabulary: state.vocabulary.vocabulary\r\n});\r\n\r\nexport default connect(mapStateToProps, {filterVocabulary, addWordToVocabulary})(Settings);","import { FILTER_VOCABULARY, ADD_WORD_TO_VOCABULARY, VocabularyActionTypes } from './types';\r\n\r\nexport function filterVocabulary(newVocabulary: string[]):VocabularyActionTypes {\r\n    return {\r\n        type: FILTER_VOCABULARY,\r\n        payload: newVocabulary\r\n    }\r\n}\r\n\r\nexport function addWordToVocabulary(wordToLearn: string[]):VocabularyActionTypes {\r\n    return {\r\n        type: ADD_WORD_TO_VOCABULARY,\r\n        payload: wordToLearn\r\n    }\r\n}","export const SAVE_IN_FAVORITES = 'SAVE_IN_FAVORITES';\r\n\r\nexport interface FavoritesState {\r\n    title: string;\r\n    description: string;\r\n}\r\n\r\nexport interface FavoritesCards {\r\n    favoritesCards: FavoritesState[]\r\n}\r\n\r\ninterface saveInFavoritesAction {\r\n    type: typeof SAVE_IN_FAVORITES;\r\n    payload: FavoritesState[];\r\n}\r\n\r\nexport type FavoritesActionType = saveInFavoritesAction;\r\n","import React, { Component } from 'react';\r\n\r\nimport { KEY_FOR_PHOTO_API } from '../constants/constants';\r\n\r\ninterface CardInfoProps {\r\n    cardTitle: string;\r\n    cardDescription: string;\r\n}\r\n\r\ninterface CardInfoState {\r\n    cardInfoSrcforImg: string;\r\n}\r\n\r\nclass CardInfo extends Component<CardInfoProps, CardInfoState> {\r\n\r\n    state: CardInfoState = {\r\n        cardInfoSrcforImg: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { cardTitle } = this.props;\r\n        fetch(`https://api.unsplash.com/search/photos?client_id=${KEY_FOR_PHOTO_API}&query=${cardTitle}`)\r\n            .then((res: any) => res.json())\r\n            .then((data) => this.setState({cardInfoSrcforImg: data.results[0].urls.small}))\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { cardTitle, cardDescription } = this.props;\r\n        const { cardInfoSrcforImg } = this.state;\r\n\r\n        return(\r\n            <div className='card-info'>\r\n                <div className='page__header'>\r\n                    <i className=\"material-icons\">list_alt</i>\r\n                    <h2 className='subtitle'>Card Info</h2>\r\n                </div>\r\n                <div className='card-info__inner'>\r\n                    <img src={cardInfoSrcforImg} alt={cardInfoSrcforImg}/>\r\n                    <p>{cardTitle}</p>\r\n                    <p>{cardDescription}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardInfo;","import React, { Component } from 'react';\r\n\r\nimport { saveInFavorites } from '../actions/localStorage/actions';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { FavoritesState } from '../actions/localStorage/types';\r\n\r\nimport  CardInfo  from './CardInfo';\r\n \r\ninterface Card {\r\n    title: string;\r\n    description: string;\r\n}\r\n\r\ninterface CardsItemsProps {\r\n    card: Card[];\r\n    saveInFavorites: (el: FavoritesState[]) => void;\r\n}\r\n\r\ninterface CardsItemsState {\r\n    isShowingCardInfo: Boolean;\r\n    cardInfoTitle: string;\r\n    cardInfoDescription: string;\r\n}\r\n\r\nclass CardsItems extends Component<CardsItemsProps, CardsItemsState> {\r\n    \r\n    state: CardsItemsState = {\r\n        isShowingCardInfo: false,\r\n        cardInfoTitle: '',\r\n        cardInfoDescription: ''\r\n    }\r\n\r\n    private handleOpenCardInfo = (el: Card) => {\r\n        this.setState({\r\n            isShowingCardInfo: true,\r\n            cardInfoTitle: el.title,\r\n            cardInfoDescription: el.description\r\n        });\r\n    }\r\n\r\n    private onAddFavorites = (el: Card) => {\r\n        const favorites = [];\r\n        favorites.push({title: el.title, description: el.description});\r\n        this.props.saveInFavorites(favorites);\r\n    }\r\n    render() {\r\n        const { card } = this.props;\r\n        const { isShowingCardInfo, cardInfoTitle, cardInfoDescription } = this.state;\r\n\r\n        const elementsCard = card.map((el, index) => {\r\n            return (\r\n                <li onClick={() => this.handleOpenCardInfo(el)} key={index} className='cards-list__items'>\r\n                    <p>{el.title}</p>\r\n                    <p>{el.description}</p>\r\n                    <button onClick={() => this.onAddFavorites(el)}>Add to favorites</button>\r\n                </li>\r\n            );\r\n        });\r\n        \r\n        return(\r\n            <>\r\n                <ul className='cards-list'>\r\n                    {elementsCard}\r\n                </ul>\r\n                {isShowingCardInfo ? <CardInfo cardTitle={cardInfoTitle} cardDescription={cardInfoDescription}/> : null}\r\n            </>    \r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { saveInFavorites })(CardsItems);","import {SAVE_IN_FAVORITES, FavoritesState, FavoritesActionType} from './types';\r\n\r\nexport function saveInFavorites(payload: FavoritesState[]): FavoritesActionType {\r\n    return {\r\n        type: SAVE_IN_FAVORITES,\r\n        payload: payload\r\n    }\r\n}","export const SHOWING_CARDS = 'SHOWING_CARDS';\r\n\r\nexport interface LoaderState {\r\n    loader: Boolean;\r\n} \r\n\r\ninterface showingCardsAction {\r\n    type: typeof SHOWING_CARDS;\r\n    payload: Boolean\r\n}\r\n\r\nexport type LoaderActionTypes = showingCardsAction;","import { SHOWING_CARDS, LoaderActionTypes } from './types';\r\n\r\nexport function isLoading(payload: Boolean): LoaderActionTypes {\r\n    return {\r\n        type: SHOWING_CARDS,\r\n        payload: payload\r\n    }\r\n}","export const SAVE_CARD_DATA = 'SAVE_CARD_DATA';\r\n\r\nexport interface CardDataState {\r\n    title: string;\r\n    description: string;\r\n}\r\n\r\nexport interface CardDataArray {\r\n    cardData: CardDataState[]\r\n}\r\n\r\ninterface CardDataAction {\r\n    type: typeof SAVE_CARD_DATA;\r\n    payload: CardDataState[];\r\n}\r\n\r\nexport type CardDataActionType = CardDataAction;","import React, { Component } from 'react';\r\n\r\nimport { AppState } from '../store/store';\r\nimport CardsItems from './CardsItems';\r\nimport Header from './Header';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { isLoading } from '../actions/loader/actions';\r\nimport { fetchNewWords } from '../actions/effects/fetchNewWords';\r\nimport { CardDataState } from '../actions/effects/types';\r\n\r\ninterface CardsState {\r\n    wordsFromServer: Object;\r\n}\r\n\r\ninterface AppProps {\r\n    wordToLearn: string[];\r\n    loader: Boolean;\r\n    isLoading: (bool: Boolean) => void;\r\n    fetchNewWords: (array: string[]) => void;\r\n    cardData: CardDataState[]\r\n}\r\n\r\nclass Cards extends Component<AppProps, CardsState> {\r\n\r\n    state: CardsState = {\r\n       wordsFromServer: {}, \r\n    }\r\n\r\n    private onShow = () => {\r\n        const {wordToLearn} = this.props;\r\n        const {wordsFromServer} = this.state;\r\n        \r\n        const storedWords = Object.keys(wordsFromServer);\r\n        const newWords = wordToLearn.filter(word => !storedWords.includes(word))\r\n      \r\n        console.log('пришел массив в Cards: ', wordToLearn);\r\n      \r\n        // проверить есть ли новые слова у нас в локальном стейте\r\n        this.props.fetchNewWords(newWords);\r\n    }\r\n\r\n    render() {\r\n        console.log('props', this.props);\r\n        const { loader, cardData } = this.props;\r\n        \r\n\r\n        return(\r\n            <div className='card'>\r\n                <Header/>\r\n                <div className='container'>\r\n                    <div className='page__header'>\r\n                        <i className=\"material-icons\">list_alt</i>\r\n                        <h2 className='subtitle'>Cards</h2>\r\n                    </div>\r\n                    <div className='card__inner'>\r\n                        <button className='card__button' onClick={this.onShow}>Show</button>\r\n                        {loader? <div className='box-loader'><span className=\"load\"/></div> : <CardsItems card={cardData}/>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    wordToLearn: state.vocabulary.wordToLearn,\r\n    loader: state.loader.loader,\r\n    cardData: state.cardData.cardData \r\n})\r\n\r\nexport default connect(mapStateToProps, { isLoading, fetchNewWords}) (Cards);","import { KEY } from '../../constants/constants';\r\nimport { saveCardData } from './actions';\r\nimport { isLoading } from '../loader/actions';\r\n\r\nexport function fetchNewWords(array: string[]) {\r\n    console.log('array равен: ', array);\r\n    return (dispatch: any) => {\r\n        const results = array.map((el: string) => {\r\n            return fetch(`https://www.dictionaryapi.com/api/v3/references/sd4/json/${el}?key=${KEY}`)\r\n                .then((res: any) => res.json())\r\n                .then((data) => formatCardData(data))\r\n        });\r\n        Promise.all(results)\r\n            .then((data) => dispatch(saveCardData(data)))\r\n            .then(() => dispatch(isLoading(false)))\r\n            .catch((error) => console.log(`error:`, error))\r\n    }\r\n}\r\n\r\nfunction formatCardData(data: any[]) {\r\n    const serverResponse = data[0];\r\n    console.log(`serverResponse`, serverResponse);\r\n\r\n   return {title: serverResponse.meta.stems[0], description: serverResponse.shortdef[0]};\r\n //форматированные данные\r\n}","import { SAVE_CARD_DATA, CardDataState, CardDataActionType } from './types';\r\n\r\nexport function saveCardData(payload: CardDataState[]): CardDataActionType {\r\n    return {\r\n        type: SAVE_CARD_DATA,\r\n        payload: payload\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Header from './Header';\r\n\r\nimport { AppState } from '../store/store';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface FavoritesState {\r\n    title: string;\r\n    description: string;\r\n}\r\n\r\ninterface FavoritesProps {\r\n    favorites: FavoritesState[];\r\n}\r\n\r\nclass Favorites extends React.Component<FavoritesProps> {\r\n\r\n    private renderFavorites = (favorites: FavoritesState[]) => (\r\n        favorites.map((el, index) => {\r\n                return (\r\n                    <li key={index} className='cards-list__items'>\r\n                        <p>{el.title}</p>\r\n                        <p>{el.description}</p>\r\n                    </li>\r\n                );\r\n            })\r\n    )\r\n        \r\n\r\n\r\n    render() {\r\n        const { favorites } = this.props; \r\n\r\n        console.log('favorites', favorites);\r\n        const elementsFavorites = favorites && favorites.length ? this.renderFavorites(favorites) : <h3>add something...</h3>;\r\n        console.log('elementsFavorites', elementsFavorites);\r\n\r\n        return (\r\n            <div className='favorites'>\r\n                <Header/>\r\n                <div className='container'>\r\n                    <div className='page__header'>\r\n                        <i className=\"material-icons\">star</i>\r\n                        <h2 className='subtitle'>Favorites Cards</h2>\r\n                    </div>\r\n                    <div className='favorites__inner'>\r\n                        {elementsFavorites}\r\n                    </div> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    favorites: state.favorites.favoritesCards\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(Favorites);","import React from 'react';\nimport './App.css';\n\nimport Home from '../../components/Home';\nimport Settings from '../../components/Settings';\nimport Cards from '../../components/Cards';\nimport Favorites from '../../components/Favorites';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path='/' component={Home}/>\n        <Route exact path='/settings' component={Settings}/>\n        <Route exact path='/cards' component={Cards}/>\n        <Route exact path='/favorites' component={Favorites}/>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { VocabularyState, FILTER_VOCABULARY, ADD_WORD_TO_VOCABULARY, VocabularyActionTypes } from '../actions/vocabulary/types';\r\n\r\nexport const initialState: VocabularyState = {\r\n    vocabulary: ['bad', 'star', 'bed', 'say', 'beautiful', 'through', 'against', 'cake'],\r\n    wordToLearn: []\r\n}\r\n\r\nexport function vocabularyReducer(state = initialState, action: VocabularyActionTypes): VocabularyState {\r\n    switch(action.type) {\r\n        case FILTER_VOCABULARY:\r\n            return {\r\n                ...state\r\n            };\r\n        case  ADD_WORD_TO_VOCABULARY: \r\n            return {\r\n                ...state,\r\n                wordToLearn: [...state.wordToLearn, ...action.payload]               \r\n            };\r\n        default:\r\n            return state;    \r\n    }\r\n}","import { SAVE_IN_FAVORITES, FavoritesCards, FavoritesActionType } from '../actions/localStorage/types';\r\n\r\nconst initialState: FavoritesCards = {\r\n    favoritesCards: []\r\n}\r\n\r\nexport function favoritesReducer(state = initialState, actions: FavoritesActionType): FavoritesCards {\r\n    switch(actions.type) {\r\n        case SAVE_IN_FAVORITES:\r\n            return {\r\n                ...state,\r\n                favoritesCards: [...state.favoritesCards, ...actions.payload]\r\n            }\r\n        default:\r\n            return state;    \r\n    }\r\n}","import {LoaderState, LoaderActionTypes, SHOWING_CARDS} from '../actions/loader/types';\r\n\r\nconst initialState: LoaderState = {\r\n    loader: true\r\n}\r\n\r\nexport function loaderReducer(state = initialState, action: LoaderActionTypes ): LoaderState {\r\n    switch(action.type) {\r\n        case SHOWING_CARDS:\r\n            return {\r\n                ...state,\r\n                loader: action.payload\r\n            } \r\n        default:\r\n            return state\r\n    }\r\n}","import { SAVE_CARD_DATA, CardDataActionType, CardDataArray } from '../actions/effects/types';\r\n\r\nconst initialState: CardDataArray = {\r\n    cardData: []\r\n}\r\n\r\nexport function saveCardDataReducer (state = initialState, actions: CardDataActionType):CardDataArray {\r\n    console.log('actions', actions);\r\n    switch(actions.type) {\r\n        case SAVE_CARD_DATA: \r\n            return {\r\n                ...state,\r\n                cardData: [...state.cardData, ...actions.payload]\r\n            } \r\n        default: \r\n            return state;    \r\n    }\r\n}\r\n\r\n","import { FavoritesCards } from './actions/localStorage/types';\r\n\r\ninterface LocalStorageInterface {\r\n    favorites: FavoritesCards\r\n}\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        console.log('serializedState', serializedState);\r\n        if (serializedState === null){\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    }catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: LocalStorageInterface) => {\r\n    console.log('сохраняем стейт в localStorage', state)\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch (err) {\r\n        //Ignore write errors.\r\n    }\r\n};","import { combineReducers } from 'redux';\r\nimport { createStore, compose, applyMiddleware  } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { vocabularyReducer } from '../reducers/vocabularyReducer';\r\nimport { initialState } from '../reducers/vocabularyReducer';\r\nimport { favoritesReducer } from '../reducers/favoritesReducer';\r\nimport { loaderReducer } from '../reducers/loaderReducer';\r\nimport { saveCardDataReducer } from '../reducers/saveCardDataReducer';\r\nimport { loadState, saveState } from '../localStorage';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    vocabulary: vocabularyReducer,\r\n    loader: loaderReducer,\r\n    favorites: favoritesReducer,\r\n    cardData: saveCardDataReducer\r\n})\r\n\r\ndeclare global {\r\n    interface Window {\r\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: any;\r\n    }\r\n  }\r\n   \r\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst persistedState = loadState() || initialState.vocabulary; \r\nconsole.log('persistedState', persistedState);\r\n\r\nexport const store = createStore(rootReducer, persistedState, composeEnhancers(applyMiddleware(thunk)) );\r\n\r\nstore.subscribe(() => {\r\n  saveState({favorites: store.getState().favorites})\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}